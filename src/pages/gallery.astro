---
import SectionTitle from "@/components/SectionTitle.astro"
import { galleryImages } from "@/consts/galleryImages"
import Layout from "@/layouts/Layout.astro"

import { Image } from "astro:assets"
---

<Layout>
    <section class="bg-theme-blue relative py-10 md:px-6 lg:px-8">
      <div class="mx-auto max-w-6xl">
        <div class="relative mb-12 flex items-center justify-center pt-14">
          <SectionTitle title="Galer√≠a" />
        </div>
        <h3 class="block pb-20 text-center text-lg font-light text-gray-700 font-Merriweather opacity-80 max-md:px-6 max-md:pb-5">
          Disfrutad de nuestra historia a trav√©s de estas im√°genes: casi 11 a√±os de recuerdos que a√∫n nos hacen sonre√≠r üì∏‚ù§Ô∏è
        </h3>

        <ul
          id="slider-mobile"
          class="flex snap-x snap-mandatory overflow-x-auto p-10 md:hidden"
        >
          {
            galleryImages.map(({ image, alt, thumb }, index) => (
              <li
                class="-m-1 aspect-9/10 w-72 shrink-0 cursor-pointer snap-center rounded-md shadow-sm transition-transform duration-300 will-change-transform"
                id={thumb + "slider"}
                data-index={index}
              >
                <Image
                  src={image}
                  alt={alt}
                  width={950}
                  height={900}
                  data-thumbID={thumb + "slider"}
                  class="border-theme-blue-light h-full w-full rounded-xl border border-none shadow-md shadow-gray-700 object-cover"
                  loading="lazy"
                />
              </li>
            ))
          }
        </ul>

        <ul
          class="hidden grid-cols-1 gap-8 sm:grid-cols-1 md:grid md:grid-cols-2 lg:grid-cols-3"
        >
          {
            galleryImages.map(({ image, alt, thumb }, index) => (
              <li
                id={thumb}
                class="aspect-7/10 cursor-pointer rounded-md shadow-sm"
                data-index={index}
              >
                <Image
                  src={image}
                  alt={alt}
                  width={580}
                  height={900}
                  data-thumbID={thumb}
                  class="border-theme-blue-light h-full w-full rounded-md border border-none shadow-md shadow-gray-700 object-cover"
                  loading="lazy"
                />
              </li>
            ))
          }
        </ul>
      </div>
      <div
        class="pointer-events-none fixed inset-0 flex cursor-pointer items-center justify-center p-4 opacity-0 transition-opacity duration-300 ease-in-out"
        role="dialog"
        aria-modal="true"
        aria-labelledby="lightbox-title"
        id="lightbox"
      >
        <h2 id="lightbox-title" class="sr-only">Galer√≠a de im√°genes Nuria y Rober</h2>
        <div class="relative w-full max-w-xl p-4">
          <button
            type="button"
            id="close-lightbox"
            class="hover:text-primary absolute top-1 -right-16 z-[999999] cursor-pointer rounded-full bg-white p-2.5 text-gray-700 transition-all duration-300 ease-in will-change-transform hover:scale-125 sm:top-6 sm:right-6 md:top-8 md:right-8"
          >
            <span class="sr-only">Cerrar Galer√≠a</span>
            <svg
              class="size-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
            </svg>
          </button>

          <button
            id="prev-image"
            class="hover:text-primary absolute -bottom-16 left-8 z-50 flex h-12 w-12 transform cursor-pointer items-center justify-center rounded-full bg-white p-2.5 text-2xl text-gray-700 transition-all duration-300 ease-in-out hover:scale-125 md:top-1/2 md:-translate-y-1/2 lg:-left-16"
          >
            &#60;
          </button>

          <button
            id="next-image"
            class="hover:text-primary absolute right-8 -bottom-16 z-50 flex h-12 w-12 transform cursor-pointer items-center justify-center rounded-full bg-white p-2.5 text-2xl text-gray-700 transition-all duration-300 ease-in-out hover:scale-125 md:top-1/2 md:-translate-y-1/2 lg:-right-16"
          >
            &#62;
          </button>

          <figure id="light-box-content"></figure>
        </div>
      </div>
    </section>
</Layout>

<script>
  const galleryItems = Array.from(
    document.querySelectorAll("#gallery li img")
  ) as HTMLImageElement[]
  const lightBox = document.getElementById("lightbox") as HTMLDivElement
  const lightBoxImgContainer = document.getElementById("light-box-content") as HTMLDivElement
  const btnCloseLightBox = document.getElementById("close-lightbox") as HTMLButtonElement
  const btnPrev = document.getElementById("prev-image") as HTMLButtonElement
  const btnNext = document.getElementById("next-image") as HTMLButtonElement

  let currentIndex = 0

  const openLightBox = (index: number) => {
    if (index < 0 || index >= galleryItems.length) return
    currentIndex = index
    const image = galleryItems[index] as HTMLImageElement

    const previousImage = lightBoxImgContainer.querySelector("img") as HTMLImageElement
    if (previousImage) {
      const galleryParentID = previousImage.getAttribute("data-thumbID")
      const galleryParent = document.getElementById(`${galleryParentID}`) as HTMLLIElement
      galleryParent.appendChild(previousImage)
    }
    // Evitamos el error de dupliacado de viewTransitionName
    galleryItems.forEach((img) => (img.style.viewTransitionName = "none"))
    image.style.viewTransitionName = "selected-img"

    lightBoxImgContainer.appendChild(image)
    lightBox.classList.remove("opacity-0", "pointer-events-none")
    lightBox.classList.add(
      "bg-[#7AB2D4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )

    document.body.style.overflow = "hidden"
    updateNavigationButtons()
  }

  const closeLightBox = (image: HTMLImageElement) => {
    lightBox.classList.add("opacity-0", "pointer-events-none")
    lightBox.classList.remove(
      "bg-[#7AB2D4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )
    const galleryParentID = image.getAttribute("data-thumbID")

    const galleryParent = document.getElementById(`${galleryParentID}`) as HTMLLIElement
    galleryParent.appendChild(image)
    document.body.style.overflow = "" // Restaurar scroll
  }

  const navigateLightBox = (direction: number) => {
    let newIndex = currentIndex + direction
    if (newIndex < 0 || newIndex >= galleryItems.length) return

    if (!document.startViewTransition) {
      openLightBox(newIndex)
      return
    }

    document.startViewTransition(() => {
      openLightBox(newIndex)
    })
  }

  const updateNavigationButtons = () => {
    if (btnPrev && btnNext) {
      btnPrev.style.display = currentIndex > 0 ? "flex" : "none"
      btnNext.style.display = currentIndex < galleryItems.length - 1 ? "flex" : "none"
    }
  }

  galleryItems.forEach((image, index) => {
    image.addEventListener("click", () => {
      if (!document.startViewTransition) {
        openLightBox(index)
        return
      }

      galleryItems.forEach((img) => {
        img.style.viewTransitionName = ""
      })

      image.style.viewTransitionName = "selected-img"

      document.startViewTransition(() => {
        openLightBox(index)
      })
    })
  })

  const handleClose = async () => {
    const image = lightBoxImgContainer.querySelector("img") as HTMLImageElement
    if (!image) return

    if (!document.startViewTransition) {
      closeLightBox(image)
      return
    }

    const animation = document.startViewTransition(() => {
      closeLightBox(image)
    })

    await animation.finished
    image.style.viewTransitionName = "none"
  }

  lightBox.addEventListener("click", handleClose)
  btnCloseLightBox.addEventListener("click", (event) => {
    event.stopPropagation()
    handleClose()
  })

  if (btnPrev && btnNext) {
    btnPrev.addEventListener("click", (event) => {
      event.stopPropagation()
      navigateLightBox(-1)
    })

    btnNext.addEventListener("click", (event) => {
      event.stopPropagation()
      navigateLightBox(1)
    })
  }

  document.addEventListener("keydown", async (event) => {
    const isLightboxOpen = !lightBox.classList.contains("opacity-0")

    if (event.key === "Escape") {
      await handleClose()
    } else if ((event.key === "ArrowRight" || event.key === "d") && isLightboxOpen) {
      event.preventDefault()
      navigateLightBox(1)
    } else if ((event.key === "ArrowLeft" || event.key === "a") && isLightboxOpen) {
      event.preventDefault()
      navigateLightBox(-1)
    }
  })

  const slider = document.getElementById("slider-mobile") as HTMLDivElement
  const sliderItems = Array.from(slider.children) as HTMLElement[]

  if (slider) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            ;(entry.target as HTMLElement).style.transform = "scale(1)"
          } else {
            ;(entry.target as HTMLElement).style.transform = "scale(0.8)"
          }
        })
      },
      {
        root: slider,
        threshold: 0.9,
      }
    )

    sliderItems.forEach((item) => {
      observer.observe(item)
    })
  }
</script>

<style>
  .title {
    position: absolute;
    color: transparent;
    -webkit-text-stroke: 2px white;
  }
  .title2 {
    position: absolute;
    color: #7AB2D4;
    animation: water 3s ease-in-out infinite;
  }
  @keyframes water {
    0%,
    100% {
      clip-path: polygon(
        0% 65%,
        10% 50%,
        25% 35%,
        40% 50%,
        55% 65%,
        70% 50%,
        85% 35%,
        100% 50%,
        100% 100%,
        0% 100%
      );
    }
    50% {
      clip-path: polygon(
        0% 35%,
        15% 50%,
        30% 65%,
        45% 50%,
        60% 35%,
        75% 50%,
        90% 65%,
        100% 50%,
        100% 100%,
        0% 100%
      );
    }
  }

  #slider-mobile {
    scrollbar-width: none;
  }

  #slider-mobile::-webkit-scrollbar {
    display: none;
  }
</style>